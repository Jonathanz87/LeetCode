/*
	problem 377
	Given an integer array with all positive numbers and no duplicates, 
	find the number of possible combinations that add up to a positive integer target.
	Example:
		nums = [1, 2, 3]
		target = 4
		The possible combination ways are:
		(1, 1, 1, 1)
		(1, 1, 2)
		(1, 2, 1)
		(1, 3)
		(2, 1, 1)
		(2, 2)
		(3, 1)
		Note that different sequences are counted as different combinations.
		Therefore the output is 7.
	Follow up:
	What if negative numbers are allowed in the given array?
	How does it change the problem?
	What limitation we need to add to the question to allow negative numbers?
*/

import java.util.Map;
import java.util.HashMap;

public class CombinationSumIV{
	public static void main(String[] args){
		int[] nums = new int[args.length - 1];

		for(int i = 0; i < nums.length; i++){
			nums[i] = Integer.parseInt(args[i]);
		}

		System.out.println(combinationSum4(nums, Integer.parseInt(args[nums.length])));
	}


	private final Map<Integer, Integer> COMBINATION_MAP = new HashMap<>();
	public static int combinationSum4(int[] nums, int target) {
        if(target < 0){
        	return 0;
        } else if(target == 0){
        	if(nums.length == 0)
        		return 0;
        	return 1;
        }
        if(COMBINATION_MAP.containsKey(target)){
        	return COMBINATION_MAP.get(target);
        }
        int sum = 0;
        for(int n : nums){
        	sum += combinationSum4(nums, target - n);
        }
 
        COMBINATION_MAP.put(target, sum);
        return sum;
    }
}
